/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.CustomerSide;

import GUI.Extras.EquipmentCount;
import GUI.Extras.CartTableModel;
import GUI.Extras.Connectosql;
import GUI.Extras.RoundButtonUI;
import com.raven.datechooser.SelectedDate;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Timestamp;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
/**
 *
 * @author leyzu
 */
public class Cart extends javax.swing.JPanel {
    private Point initialClick;
    private Store parentFrame;
    
    public Cart(Store frame) {
        initComponents();
        this.parentFrame = frame;
        parentFrame.enablePanelDragging(MainPanelDrag2);
        startTime.setEditor(timeEditor);
        endTime.setEditor(timeEditor2);
        startTime.now();
        startDate.toDay();
        totalCost.setEditable(false);
        dateEditor.setForeground(Color.WHITE);
        dateEditor2.setForeground(Color.WHITE);
        timeEditor.setForeground(Color.WHITE);
        timeEditor2.setForeground(Color.WHITE);
        // Adding time selection listener to startTime
        startTime.addTimeSelectionListener(e -> updateTotalCost());
        
        // Adding time selection listener to endTime
        endTime.addTimeSelectionListener(e -> updateTotalCost());
        startDate.addPropertyChangeListener(e -> updateTotalCost());
        endDate.addPropertyChangeListener(e -> updateTotalCost());
        
        equipTable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int row = equipTable.getSelectedRow();
                    if (row != -1) {
                        EquipmentCount item = parentFrame.getCartItems().get(row);

                        if (item.isPartOfPackage()) {
                            removePackageItemsFromCart(item);
                        } else {
                            removeIndividualItemFromCart(row, item);
                        }

                        updateCartTable(parentFrame.getCartItems());
                        updateTotalCost(); // Update total cost after removing items
                    }
                }
            }
        });
        
        customizeButton();
        parentFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        updateTotalCost();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startTime = new raven.datetime.component.time.TimePicker();
        startDate = new com.raven.datechooser.DateChooser();
        endTime = new raven.datetime.component.time.TimePicker();
        endDate = new com.raven.datechooser.DateChooser();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        equipScroll = new javax.swing.JScrollPane();
        equipTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        addressCheckout = new java.awt.TextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        PaymentMethod = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        totalCost = new javax.swing.JTextField();
        timeEditor = new javax.swing.JFormattedTextField();
        dateEditor = new javax.swing.JTextField();
        timeEditor2 = new javax.swing.JFormattedTextField();
        dateEditor2 = new javax.swing.JTextField();
        nameCheckout = new javax.swing.JTextField();
        emailCheckout = new javax.swing.JTextField();
        phoneCheckout = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        placeRent = new javax.swing.JButton();
        MainPanelDrag2 = new javax.swing.JPanel();
        backBut = new javax.swing.JButton();
        Exit_front2 = new javax.swing.JButton();
        Minimize_front2 = new javax.swing.JButton();

        startDate.setDateFormat("yyyy-MM-dd");
        startDate.setTextRefernce(dateEditor);

        endDate.setDateFormat("yyyy-MM-dd");
        endDate.setTextRefernce(dateEditor2);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(204, 204, 204), new java.awt.Color(0, 0, 0), new java.awt.Color(255, 255, 255)));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "FER", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        equipTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Equipment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        equipScroll.setViewportView(equipTable);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Customer Name");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Customer Phone");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Customer Email");

        addressCheckout.setBackground(new java.awt.Color(51, 51, 51));
        addressCheckout.setForeground(new java.awt.Color(255, 255, 255));
        addressCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressCheckoutActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Customer Address");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Start Date");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("End Date");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Payment Method");

        PaymentMethod.setBackground(new java.awt.Color(51, 51, 51));
        PaymentMethod.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        PaymentMethod.setForeground(new java.awt.Color(255, 255, 255));
        PaymentMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Cheque", "Online", "Card" }));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Total Cost");

        totalCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalCostActionPerformed(evt);
            }
        });

        timeEditor.setBackground(new java.awt.Color(0, 0, 0));
        timeEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeEditorActionPerformed(evt);
            }
        });

        dateEditor.setBackground(new java.awt.Color(0, 0, 0));
        dateEditor.setForeground(new java.awt.Color(255, 255, 255));

        timeEditor2.setBackground(new java.awt.Color(0, 0, 0));
        timeEditor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeEditor2ActionPerformed(evt);
            }
        });

        dateEditor2.setBackground(new java.awt.Color(0, 0, 0));
        dateEditor2.setForeground(new java.awt.Color(255, 255, 255));
        dateEditor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateEditor2ActionPerformed(evt);
            }
        });

        nameCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameCheckoutActionPerformed(evt);
            }
        });

        emailCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailCheckoutActionPerformed(evt);
            }
        });

        phoneCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneCheckoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(equipScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(266, 266, 266))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(addressCheckout, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(nameCheckout, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                                            .addComponent(emailCheckout, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(phoneCheckout, javax.swing.GroupLayout.Alignment.LEADING)))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(dateEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(timeEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGap(90, 90, 90))
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                        .addComponent(jLabel7)
                                                        .addGap(126, 126, 126))
                                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(PaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(90, 90, 90))))
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(totalCost, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(timeEditor2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addGap(62, 62, 62)
                                                    .addComponent(jLabel9))))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGap(299, 299, 299)
                                            .addComponent(dateEditor2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(74, 74, 74)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                                        .addComponent(jLabel8)
                                        .addGap(118, 118, 118)))))
                        .addContainerGap(14, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(emailCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addressCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateEditor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeEditor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalCost, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(equipScroll)
                .addContainerGap())
        );

        jPanel8.setBackground(new java.awt.Color(102, 102, 102));
        jPanel8.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CHECKOUT");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(350, 350, 350)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, Short.MAX_VALUE)
                .addContainerGap())
        );

        placeRent.setBackground(new java.awt.Color(102, 102, 102));
        placeRent.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        placeRent.setForeground(new java.awt.Color(255, 255, 255));
        placeRent.setText("Rent Equipment");
        placeRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeRentActionPerformed(evt);
            }
        });

        MainPanelDrag2.setBackground(new java.awt.Color(102, 102, 102));
        MainPanelDrag2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        backBut.setBackground(new java.awt.Color(255, 204, 0));
        backBut.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        backBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButActionPerformed(evt);
            }
        });

        Exit_front2.setBackground(new java.awt.Color(255, 0, 0));
        Exit_front2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        Exit_front2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit_front2ActionPerformed(evt);
            }
        });

        Minimize_front2.setBackground(new java.awt.Color(0, 255, 0));
        Minimize_front2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        Minimize_front2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Minimize_front2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainPanelDrag2Layout = new javax.swing.GroupLayout(MainPanelDrag2);
        MainPanelDrag2.setLayout(MainPanelDrag2Layout);
        MainPanelDrag2Layout.setHorizontalGroup(
            MainPanelDrag2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelDrag2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(Exit_front2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backBut, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Minimize_front2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MainPanelDrag2Layout.setVerticalGroup(
            MainPanelDrag2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelDrag2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(MainPanelDrag2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Minimize_front2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backBut, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Exit_front2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 5, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(MainPanelDrag2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(402, 402, 402)
                .addComponent(placeRent)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(MainPanelDrag2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(placeRent)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void retrieveUserInfo() {
        // Check if user is signed up or logged in
        String email = (SignUp.signedUpUserEmail != null) ? SignUp.signedUpUserEmail : Login.loggedInUserEmail;

        if (email != null) {
            try (Connection connect = Connectosql.getInstance().getConnection();
                 PreparedStatement stmt = connect.prepareStatement("SELECT CustomerName, CustomerEmail, CustomerPhone, CustomerAddress FROM userlist WHERE CustomerEmail = ?")) {

                stmt.setString(1, email);

                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        String customerName = rs.getString("CustomerName");
                        String customerEmail = rs.getString("CustomerEmail");
                        String customerPhone = rs.getString("CustomerPhone");
                        String customerAddress = rs.getString("CustomerAddress");

                        nameCheckout.setText(customerName);
                        emailCheckout.setText(customerEmail);
                        phoneCheckout.setText((customerPhone != null) ? customerPhone : "");
                        addressCheckout.setText((customerAddress != null) ? customerAddress : "");
                    } else {
                        JOptionPane.showMessageDialog(this, "User information not found.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error retrieving user information: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No user logged in or signed up.", "Login Required", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private void customizeButton() {
        Exit_front2.setUI(new RoundButtonUI());
        Minimize_front2.setUI(new RoundButtonUI());
        backBut.setUI(new RoundButtonUI());
    }
    
    private long calculateRentalHours() {
        SelectedDate startDateValue = startDate.getSelectedDate();
        SelectedDate endDateValue = endDate.getSelectedDate();
        LocalTime startTimeValue = startTime.getSelectedTime();
        LocalTime endTimeValue = endTime.getSelectedTime();

        if (startDateValue == null || endDateValue == null || startTimeValue == null || endTimeValue == null) {
            return 0;
        }

        // Assuming SelectedDate has a method to convert to LocalDate
        LocalDate startDateLocal = LocalDate.of(startDateValue.getYear(), startDateValue.getMonth(), startDateValue.getDay());
        LocalDate endDateLocal = LocalDate.of(endDateValue.getYear(), endDateValue.getMonth(), endDateValue.getDay());

        LocalDateTime startDateTime = startDateLocal.atTime(startTimeValue);
        LocalDateTime endDateTime = endDateLocal.atTime(endTimeValue);

        Duration duration = Duration.between(startDateTime, endDateTime);

        // Calculate the total hours between the start and end dates
        return duration.toHours();
    }

    private void updateTotalCost() {
        long rentalHours = calculateRentalHours();

        double totalCostValue = 0.0;
        for (EquipmentCount item : parentFrame.getCartItems()) {
            double hourlyRate = item.getPrice() / 12.0; // Assume 12-hour rental periods
            totalCostValue += hourlyRate * rentalHours;
        }

        totalCost.setText(String.format("%.2f", totalCostValue));
        System.out.println("Updated total cost: " + totalCostValue);
    }

    
    private void removeIndividualItemFromCart(int row, EquipmentCount item) {
        parentFrame.getCartItems().remove(row);
        int currentCount = parentFrame.equipmentQuantities.getOrDefault(item.getName(), 0);
        if (currentCount > 1) {
            parentFrame.equipmentQuantities.put(item.getName(), currentCount - 1);
        } else {
            parentFrame.equipmentQuantities.remove(item.getName());
        }
        updateTotalCost();
        JOptionPane.showMessageDialog(parentFrame, item.getName() + " removed from the cart.", "Item Removed", JOptionPane.INFORMATION_MESSAGE);
    }

    private void removePackageItemsFromCart(EquipmentCount packageItem) {
        int packageID = packageItem.getID();
        System.out.printf("Removing package: %s, Package ID: %d%n", packageItem.getName(), packageID);

        // Remove the package from the cart
        parentFrame.getCartItems().remove(packageItem);

        JOptionPane.showMessageDialog(parentFrame, "Package " + packageItem.getName() + " removed from the cart.", "Package Removed", JOptionPane.INFORMATION_MESSAGE);

        // Update the cart table after removal
        updateCartTable(parentFrame.getCartItems());
        updateTotalCost();
        System.out.println("Cart table updated.");
    }

    
    public void updateCartTable(List<EquipmentCount> cartItems) {
        CartTableModel cartModel = new CartTableModel(cartItems);
        equipTable.setModel(cartModel);
        equipTable.revalidate();
        equipTable.repaint();
        retrieveUserInfo();
    }

    private void addressCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressCheckoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressCheckoutActionPerformed

    private void backButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButActionPerformed
        parentFrame.getCardLayout().show(parentFrame.getCardPanel(), "StorePanel");
    }//GEN-LAST:event_backButActionPerformed

    private void Exit_front2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit_front2ActionPerformed
        // TODO add your handling code here:
        parentFrame.dispose();
    }//GEN-LAST:event_Exit_front2ActionPerformed

    private void Minimize_front2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Minimize_front2ActionPerformed
        // TODO add your handling code here:
        parentFrame.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_Minimize_front2ActionPerformed

    private void timeEditor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeEditor2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeEditor2ActionPerformed

    private void dateEditor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateEditor2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateEditor2ActionPerformed

    private void totalCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalCostActionPerformed

    private void nameCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameCheckoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameCheckoutActionPerformed

    private void emailCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailCheckoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailCheckoutActionPerformed

    private void phoneCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneCheckoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneCheckoutActionPerformed

    private void placeRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeRentActionPerformed
        // Fetch information from checkout fields
        String customerName = nameCheckout.getText();
        String customerEmail = emailCheckout.getText();
        String customerPhone = phoneCheckout.getText();
        String customerAddress = addressCheckout.getText();
        double totalCostValue = Double.parseDouble(totalCost.getText());
        String paymentMethods = (String) PaymentMethod.getSelectedItem();

        String paymentMethod = "";
        if (paymentMethods.equals("Cash")) {
            paymentMethod = "1";
        } else if (paymentMethods.equals("Card")) {
            paymentMethod = "2";
        } else if (paymentMethods.equals("Cheque")) {
            paymentMethod = "3";
        } else if (paymentMethods.equals("Online")) {
            paymentMethod = "4";
        }

        // Fetch date and time information
        SelectedDate startDateValue = startDate.getSelectedDate();
        SelectedDate endDateValue = endDate.getSelectedDate();
        LocalTime startTimeValue = startTime.getSelectedTime();
        LocalTime endTimeValue = endTime.getSelectedTime();

        LocalDateTime startDateTime = LocalDateTime.of(startDateValue.getYear(), startDateValue.getMonth(), startDateValue.getDay(), startTimeValue.getHour(), startTimeValue.getMinute());
        LocalDateTime endDateTime = LocalDateTime.of(endDateValue.getYear(), endDateValue.getMonth(), endDateValue.getDay(), endTimeValue.getHour(), endTimeValue.getMinute());

        Connection connect = null;
        PreparedStatement updateCustomerStmt = null;
        PreparedStatement insertOrderStmt = null;
        PreparedStatement insertCustomerListStmt = null;
        PreparedStatement updateEquipmentStmt = null;

        try {
            // Connect to the database
            connect = Connectosql.getInstance().getConnection();
            connect.setAutoCommit(false);  // Begin transaction

            // Update customer information
            String updateCustomerQuery = "UPDATE userlist SET CustomerName = ?, CustomerPhone = ?, CustomerAddress = ? WHERE CustomerEmail = ?";
            updateCustomerStmt = connect.prepareStatement(updateCustomerQuery);
            updateCustomerStmt.setString(1, customerName);
            updateCustomerStmt.setString(2, customerPhone);
            updateCustomerStmt.setString(3, customerAddress);
            updateCustomerStmt.setString(4, customerEmail);
            updateCustomerStmt.executeUpdate();

            // Insert order information
            String insertOrderQuery = "INSERT INTO customerorder (CustomerPaymentID, CustomerStartDate, CustomerEndDate, TotalCost, UserID, ReturnStatus) " +
                                      "VALUES (?, ?, ?, ?, (SELECT UserID FROM userlist WHERE CustomerEmail = ?), ?)";
            insertOrderStmt = connect.prepareStatement(insertOrderQuery, Statement.RETURN_GENERATED_KEYS);
            insertOrderStmt.setString(1, paymentMethod);
            insertOrderStmt.setTimestamp(2, Timestamp.valueOf(startDateTime));
            insertOrderStmt.setTimestamp(3, Timestamp.valueOf(endDateTime));
            insertOrderStmt.setDouble(4, totalCostValue);
            insertOrderStmt.setString(5, customerEmail);
            insertOrderStmt.setBoolean(6, false);
            insertOrderStmt.executeUpdate();

            // Retrieve generated CustomerOrderID
            ResultSet generatedKeys = insertOrderStmt.getGeneratedKeys();
            int customerOrderID = 0;
            if (generatedKeys.next()) {
                customerOrderID = generatedKeys.getInt(1);
            }

            // Insert rented equipment or package details and update their availability
            for (EquipmentCount item : parentFrame.getCartItems()) {
                if (item.isPartOfPackage()) {
                    // Insert package equipment and update their availability
                    String selectPackageEquipmentsQuery = "SELECT EquipmentID FROM packageequipment WHERE PackageID = ?";
                    try (PreparedStatement selectPackageEquipmentsStmt = connect.prepareStatement(selectPackageEquipmentsQuery)) {
                        selectPackageEquipmentsStmt.setInt(1, item.getID());
                        try (ResultSet rs = selectPackageEquipmentsStmt.executeQuery()) {
                            while (rs.next()) {
                                int equipmentID = rs.getInt("EquipmentID");
                                insertCustomerList(connect, customerOrderID, equipmentID);

                                // Update equipment availability
                                String updateEquipmentQuery = "UPDATE equipment SET EquipmentAvailability = FALSE WHERE EquipmentID = ?";
                                try (PreparedStatement updateEquipmentStmtInLoop = connect.prepareStatement(updateEquipmentQuery)) {
                                    updateEquipmentStmtInLoop.setInt(1, equipmentID);
                                    updateEquipmentStmtInLoop.executeUpdate();
                                }
                            }
                        }
                    }
                } else {
                    // Insert individual equipment and update availability
                    insertCustomerList(connect, customerOrderID, item.getID());

                    // Update equipment availability
                    String updateEquipmentQuery = "UPDATE equipment SET EquipmentAvailability = FALSE WHERE EquipmentID = ? LIMIT ?";
                    updateEquipmentStmt = connect.prepareStatement(updateEquipmentQuery);
                    updateEquipmentStmt.setInt(1, item.getID());
                    updateEquipmentStmt.setInt(2, item.getAvailableCount()); // Use availableCount as quantity
                    updateEquipmentStmt.executeUpdate();
                }
            }

            connect.commit();  // Commit transaction
            JOptionPane.showMessageDialog(this, "Order placed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Reset login/signup information
            SignUp.signedUpUserName = null;
            SignUp.signedUpUserEmail = null;
            Login.loggedInUserName = null;
            Login.loggedInUserEmail = null;

            // Restart the Store class
            new Store().setVisible(true);
            parentFrame.dispose();

        } catch (SQLException e) {
            if (connect != null) {
                try {
                    connect.rollback();  // Rollback transaction on error
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
            JOptionPane.showMessageDialog(this, "Error placing order: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Ensure resources are closed
            try {
                if (updateCustomerStmt != null) updateCustomerStmt.close();
                if (insertOrderStmt != null) insertOrderStmt.close();
                if (insertCustomerListStmt != null) insertCustomerListStmt.close();
                if (updateEquipmentStmt != null) updateEquipmentStmt.close();
                if (connect != null) connect.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_placeRentActionPerformed

    private void timeEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeEditorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeEditorActionPerformed

    private void insertCustomerList(Connection connect, int customerOrderID, int equipmentID) throws SQLException {
        String insertCustomerListQuery = "INSERT INTO customerlist (CustomerOrderID, EquipmentID) VALUES (?, ?)";
        try (PreparedStatement insertCustomerListStmt = connect.prepareStatement(insertCustomerListQuery)) {
            insertCustomerListStmt.setInt(1, customerOrderID);
            insertCustomerListStmt.setInt(2, equipmentID);
            insertCustomerListStmt.executeUpdate();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit_front2;
    private javax.swing.JPanel MainPanelDrag2;
    private javax.swing.JButton Minimize_front2;
    private javax.swing.JComboBox<String> PaymentMethod;
    private java.awt.TextField addressCheckout;
    private javax.swing.JButton backBut;
    private javax.swing.JTextField dateEditor;
    private javax.swing.JTextField dateEditor2;
    private javax.swing.JTextField emailCheckout;
    private com.raven.datechooser.DateChooser endDate;
    private raven.datetime.component.time.TimePicker endTime;
    private javax.swing.JScrollPane equipScroll;
    private javax.swing.JTable equipTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTextField nameCheckout;
    private javax.swing.JTextField phoneCheckout;
    private javax.swing.JButton placeRent;
    private com.raven.datechooser.DateChooser startDate;
    private raven.datetime.component.time.TimePicker startTime;
    private javax.swing.JFormattedTextField timeEditor;
    private javax.swing.JFormattedTextField timeEditor2;
    private javax.swing.JTextField totalCost;
    // End of variables declaration//GEN-END:variables
}
