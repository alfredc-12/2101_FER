/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.AdminDashboard;
import GUI.Extras.Connectosql;
import GUI.Extras.Equipment;
import GUI.Extras.EquipmentCategoryTableModel;
import GUI.Extras.EquipmentCount;
import GUI.Extras.EquipmentDAO;
import GUI.Extras.EquipmentNameTableModel;
import GUI.Extras.ImageFileTransferHandler;
import GUI.GuiFer;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.Statement;
import javax.swing.*;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.TableColumn;
import java.sql.ResultSet;
import GUI.Extras.PackageTableModel;
import GUI.Extras.PackageTableCellRenderer;
import GUI.Extras.Package;
import java.awt.Image;
import java.sql.PreparedStatement;
/**
 *
 * @author leyzu
 */
public class EditBundle extends javax.swing.JPanel {
     private GuiFer parentFrame;
    private Point initialClick;
    private EquipmentDAO equipmentDAO;
    public EditBundle (GuiFer frame) {
        this.parentFrame = frame;
        equipmentDAO = new EquipmentDAO();
        initComponents();
        loadPackageTable();
        loadEquipment(1);
        parentFrame.enablePanelDragging(MainPanelDrag);
        parentFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        EmptyPannel = new javax.swing.JPanel();
        EquipmentSp = new javax.swing.JScrollPane();
        allequipmentTable = new javax.swing.JTable();
        UpdatePkg = new javax.swing.JButton();
        CameraBut1 = new javax.swing.JButton();
        LightBut = new javax.swing.JButton();
        AudioBut = new javax.swing.JButton();
        MisceBut = new javax.swing.JButton();
        MainPanelDrag = new javax.swing.JPanel();
        Resize_front = new javax.swing.JButton();
        Exit_front = new javax.swing.JButton();
        Minimize_front = new javax.swing.JButton();
        imagePanel = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        packageTable = new javax.swing.JTable();
        Delete = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        DESC = new javax.swing.JLabel();
        PKGEQUIPMENT = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        RPrice = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        PKGNAME = new javax.swing.JLabel();
        PKGIMG = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        packageName = new javax.swing.JTextField();
        rentedPrice = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        equipmentTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        descBox = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        DisplayBut = new javax.swing.JButton();
        BundleBut = new javax.swing.JButton();
        CustomerOrderBut = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        OpenMenu = new javax.swing.JButton();
        Reports = new javax.swing.JButton();
        EditFront = new javax.swing.JButton();
        Returncalc = new javax.swing.JButton();
        AddBut = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        EmptyPannel.setBackground(new java.awt.Color(102, 102, 102));
        EmptyPannel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        allequipmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        EquipmentSp.setViewportView(allequipmentTable);

        UpdatePkg.setBackground(new java.awt.Color(51, 51, 51));
        UpdatePkg.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        UpdatePkg.setForeground(new java.awt.Color(255, 255, 255));
        UpdatePkg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-update-25.png"))); // NOI18N
        UpdatePkg.setText("Update Package");
        UpdatePkg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePkgActionPerformed(evt);
            }
        });

        CameraBut1.setBackground(new java.awt.Color(51, 51, 51));
        CameraBut1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        CameraBut1.setForeground(new java.awt.Color(255, 255, 255));
        CameraBut1.setText("CAMERA");
        CameraBut1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CameraBut1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CameraBut1ActionPerformed(evt);
            }
        });

        LightBut.setBackground(new java.awt.Color(51, 51, 51));
        LightBut.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LightBut.setForeground(new java.awt.Color(255, 255, 255));
        LightBut.setText("LIGHTING");
        LightBut.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LightBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LightButActionPerformed(evt);
            }
        });

        AudioBut.setBackground(new java.awt.Color(51, 51, 51));
        AudioBut.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        AudioBut.setForeground(new java.awt.Color(255, 255, 255));
        AudioBut.setText("AUDIO");
        AudioBut.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        AudioBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AudioButActionPerformed(evt);
            }
        });

        MisceBut.setBackground(new java.awt.Color(51, 51, 51));
        MisceBut.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MisceBut.setForeground(new java.awt.Color(255, 255, 255));
        MisceBut.setText("MISCELLANEOUS");
        MisceBut.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        MisceBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MisceButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EmptyPannelLayout = new javax.swing.GroupLayout(EmptyPannel);
        EmptyPannel.setLayout(EmptyPannelLayout);
        EmptyPannelLayout.setHorizontalGroup(
            EmptyPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmptyPannelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UpdatePkg)
                .addGap(261, 261, 261))
            .addGroup(EmptyPannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EmptyPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EquipmentSp, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmptyPannelLayout.createSequentialGroup()
                        .addComponent(CameraBut1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(LightBut, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AudioBut, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(MisceBut, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        EmptyPannelLayout.setVerticalGroup(
            EmptyPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmptyPannelLayout.createSequentialGroup()
                .addGroup(EmptyPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CameraBut1)
                    .addComponent(LightBut)
                    .addComponent(AudioBut)
                    .addComponent(MisceBut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EquipmentSp, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UpdatePkg)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPanelDrag.setBackground(new java.awt.Color(102, 102, 102));
        MainPanelDrag.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Resize_front.setBackground(new java.awt.Color(255, 204, 0));
        Resize_front.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        Resize_front.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resize_frontActionPerformed(evt);
            }
        });

        Exit_front.setBackground(new java.awt.Color(255, 0, 0));
        Exit_front.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        Exit_front.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit_frontActionPerformed(evt);
            }
        });

        Minimize_front.setBackground(new java.awt.Color(0, 255, 0));
        Minimize_front.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        Minimize_front.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Minimize_frontActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainPanelDragLayout = new javax.swing.GroupLayout(MainPanelDrag);
        MainPanelDrag.setLayout(MainPanelDragLayout);
        MainPanelDragLayout.setHorizontalGroup(
            MainPanelDragLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelDragLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(Exit_front, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Resize_front, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Minimize_front, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(993, Short.MAX_VALUE))
        );
        MainPanelDragLayout.setVerticalGroup(
            MainPanelDragLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelDragLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(MainPanelDragLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Minimize_front, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Resize_front, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Exit_front, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 5, Short.MAX_VALUE))
        );

        imagePanel.setBackground(new java.awt.Color(102, 102, 102));
        imagePanel.setForeground(new java.awt.Color(255, 255, 255));
        imagePanel.setLayout(new java.awt.BorderLayout());

        jPanel10.setBackground(new java.awt.Color(102, 102, 102));
        jPanel10.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        packageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPane.setViewportView(packageTable);

        Delete.setBackground(new java.awt.Color(51, 51, 51));
        Delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Delete.setForeground(new java.awt.Color(255, 255, 255));
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(Delete)
                .addContainerGap(71, Short.MAX_VALUE))
            .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(scrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Delete)
                .addContainerGap())
        );

        jPanel11.setBackground(new java.awt.Color(102, 102, 102));
        jPanel11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        DESC.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        DESC.setForeground(new java.awt.Color(255, 255, 255));
        DESC.setText("DESCRIPTION");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(DESC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(DESC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        PKGEQUIPMENT.setBackground(new java.awt.Color(102, 102, 102));
        PKGEQUIPMENT.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("EQUIPMENT");

        javax.swing.GroupLayout PKGEQUIPMENTLayout = new javax.swing.GroupLayout(PKGEQUIPMENT);
        PKGEQUIPMENT.setLayout(PKGEQUIPMENTLayout);
        PKGEQUIPMENTLayout.setHorizontalGroup(
            PKGEQUIPMENTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PKGEQUIPMENTLayout.createSequentialGroup()
                .addContainerGap(157, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(151, 151, 151))
        );
        PKGEQUIPMENTLayout.setVerticalGroup(
            PKGEQUIPMENTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel13.setBackground(new java.awt.Color(102, 102, 102));
        jPanel13.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        RPrice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        RPrice.setForeground(new java.awt.Color(255, 255, 255));
        RPrice.setText("RENTED PRICE");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(RPrice)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel14.setBackground(new java.awt.Color(102, 102, 102));
        jPanel14.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        PKGNAME.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        PKGNAME.setForeground(new java.awt.Color(255, 255, 255));
        PKGNAME.setText("PACKAGE NAME");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(PKGNAME)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PKGNAME, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        PKGIMG.setBackground(new java.awt.Color(102, 102, 102));
        PKGIMG.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("PACKAGE IMG");

        javax.swing.GroupLayout PKGIMGLayout = new javax.swing.GroupLayout(PKGIMG);
        PKGIMG.setLayout(PKGIMGLayout);
        PKGIMGLayout.setHorizontalGroup(
            PKGIMGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PKGIMGLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(139, 139, 139))
        );
        PKGIMGLayout.setVerticalGroup(
            PKGIMGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        packageName.setBackground(new java.awt.Color(102, 102, 102));
        packageName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        packageName.setForeground(new java.awt.Color(255, 255, 255));

        rentedPrice.setBackground(new java.awt.Color(102, 102, 102));
        rentedPrice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rentedPrice.setForeground(new java.awt.Color(255, 255, 255));

        equipmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Equipment Name"
            }
        ));
        jScrollPane1.setViewportView(equipmentTable);

        descBox.setColumns(20);
        descBox.setLineWrap(true);
        descBox.setRows(5);
        descBox.setWrapStyleWord(true);
        jScrollPane2.setViewportView(descBox);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "FER", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        DisplayBut.setBackground(new java.awt.Color(51, 51, 51));
        DisplayBut.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        DisplayBut.setForeground(new java.awt.Color(255, 255, 255));
        DisplayBut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-show-property-25.png"))); // NOI18N
        DisplayBut.setText("DISPLAY ");
        DisplayBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayButActionPerformed(evt);
            }
        });

        BundleBut.setBackground(new java.awt.Color(51, 51, 51));
        BundleBut.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BundleBut.setForeground(new java.awt.Color(255, 255, 255));
        BundleBut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-add-25.png"))); // NOI18N
        BundleBut.setText("BUNDLE ");
        BundleBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BundleButActionPerformed(evt);
            }
        });

        CustomerOrderBut.setBackground(new java.awt.Color(51, 51, 51));
        CustomerOrderBut.setFont(new java.awt.Font("Segoe UI", 1, 8)); // NOI18N
        CustomerOrderBut.setForeground(new java.awt.Color(255, 255, 255));
        CustomerOrderBut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-create-order-25.png"))); // NOI18N
        CustomerOrderBut.setText("CUSTOMER ORDER");
        CustomerOrderBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerOrderButActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(51, 51, 51));
        jPanel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel11.setFont(new java.awt.Font("Gagalin", 0, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("CUSTOMER");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));
        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setFont(new java.awt.Font("Gagalin", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("ADMIN");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        OpenMenu.setBackground(new java.awt.Color(51, 51, 51));
        OpenMenu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        OpenMenu.setForeground(new java.awt.Color(255, 255, 255));
        OpenMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-menu-squared-25.png"))); // NOI18N
        OpenMenu.setText("OPEN MENU");
        OpenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuActionPerformed(evt);
            }
        });

        Reports.setBackground(new java.awt.Color(51, 51, 51));
        Reports.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Reports.setForeground(new java.awt.Color(255, 255, 255));
        Reports.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-report-25.png"))); // NOI18N
        Reports.setText("REPORT");
        Reports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportsActionPerformed(evt);
            }
        });

        EditFront.setBackground(new java.awt.Color(51, 51, 51));
        EditFront.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        EditFront.setForeground(new java.awt.Color(255, 255, 255));
        EditFront.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-edit-25.png"))); // NOI18N
        EditFront.setText("EDIT BUNDLE");
        EditFront.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditFrontActionPerformed(evt);
            }
        });

        Returncalc.setBackground(new java.awt.Color(51, 51, 51));
        Returncalc.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Returncalc.setForeground(new java.awt.Color(255, 255, 255));
        Returncalc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-return-25.png"))); // NOI18N
        Returncalc.setText("RETURN");
        Returncalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturncalcActionPerformed(evt);
            }
        });

        AddBut.setBackground(new java.awt.Color(51, 51, 51));
        AddBut.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        AddBut.setForeground(new java.awt.Color(255, 255, 255));
        AddBut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-add-25.png"))); // NOI18N
        AddBut.setText("ADD");
        AddBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(DisplayBut, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BundleBut, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CustomerOrderBut, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Returncalc, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EditFront, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Reports, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OpenMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AddBut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DisplayBut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BundleBut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CustomerOrderBut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(OpenMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Reports, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(EditFront, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Returncalc, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(rentedPrice, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(packageName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(imagePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PKGEQUIPMENT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(PKGIMG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(EmptyPannel, javax.swing.GroupLayout.PREFERRED_SIZE, 666, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(MainPanelDrag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(MainPanelDrag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(PKGIMG, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(packageName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rentedPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PKGEQUIPMENT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EmptyPannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadPackageTable() {
        List<Package> packageList = fetchPackagesFromDatabase();
        PackageTableModel packageTableModel = new PackageTableModel(packageList);
        packageTable.setModel(packageTableModel);
        packageTable.setDefaultRenderer(Object.class, new PackageTableCellRenderer());
        packageTable.setRowHeight(95); // Adjust row height to fit images and names

        // Disable column resizing
        packageTable.getTableHeader().setResizingAllowed(false);
        packageTable.getTableHeader().setReorderingAllowed(false);

        // Remove column headers
        packageTable.setTableHeader(null);

        // Adjust column width based on content
        packageTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN); // Enable automatic resizing
        for (int i = 0; i < packageTable.getColumnCount(); i++) {
            TableColumn column = packageTable.getColumnModel().getColumn(i);
            column.setPreferredWidth(130); // Adjust width for each column to handle long names
        }

        // Add mouse listener for double-click to preview package
        packageTable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int row = packageTable.getSelectedRow();
                    Package selectedPackage = (Package) packageTable.getValueAt(row, 0); // Assuming the package is in the first column
                    int packageID = selectedPackage.getPackageID();
                    System.out.println("Selected Package ID: " + packageID);
                    
                    populateFields(selectedPackage);
                }
            }
        });
        
        // Inside your class, after initializing the equipmentTable
        equipmentTable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int row = equipmentTable.getSelectedRow();
                    if (row != -1) {
                        EquipmentNameTableModel model = (EquipmentNameTableModel) equipmentTable.getModel();
                        model.removeEquipmentAt(row);
                    }
                }
            }
        });
        
        // Add double-click listener to add equipment to equipmentTable
        allequipmentTable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int row = allequipmentTable.getSelectedRow();
                    if (row != -1) {
                        EquipmentCategoryTableModel allEquipmentModel = (EquipmentCategoryTableModel) allequipmentTable.getModel();
                        Equipment selectedEquipment = allEquipmentModel.getEquipmentAt(row);

                        // Add equipment to equipmentTable
                        EquipmentNameTableModel equipmentModel = (EquipmentNameTableModel) equipmentTable.getModel();
                        List<Equipment> currentEquipment = new ArrayList<>();
                        for (int i = 0; i < equipmentModel.getRowCount(); i++) {
                            currentEquipment.add(equipmentModel.equipmentList.get(i));
                        }
                        currentEquipment.add(selectedEquipment);
                        equipmentModel = new EquipmentNameTableModel(currentEquipment);
                        equipmentTable.setModel(equipmentModel);

                        // Decrement quantity in allEquipmentTable
                        allEquipmentModel.decrementQuantity(selectedEquipment.getName());
                    }
                }
            }
        });

        // Set table inside scroll pane
        scrollPane.setViewportView(packageTable);
        scrollPane.setPreferredSize(new Dimension(618, 100)); // Set scroll pane dimensions
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); // Enable horizontal scrolling
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER); // Disable vertical scrolling

        // Hide scrollbars while keeping scrolling functionality
        scrollPane.getHorizontalScrollBar().setPreferredSize(new Dimension(0, 0));
        scrollPane.getVerticalScrollBar().setPreferredSize(new Dimension(0, 0));
    }
    
    private List<Equipment> fetchEquipmentForPackage(int packageID) {
        List<Equipment> equipmentList = new ArrayList<>();
        Connection connect = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            connect = Connectosql.getInstance().getConnection();
            String query = "SELECT e.EquipmentName FROM equipment e " +
                           "JOIN packageequipment pe ON e.EquipmentID = pe.EquipmentID " +
                           "WHERE pe.PackageID = ?";
            stmt = connect.prepareStatement(query);
            stmt.setInt(1, packageID);
            rs = stmt.executeQuery();

            while (rs.next()) {
                String equipmentName = rs.getString("EquipmentName");
                // Assuming Equipment class constructor with just name for simplicity
                Equipment equipment = new Equipment(equipmentName, 0, 0.0, "", false);
                equipmentList.add(equipment);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (connect != null) connect.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return equipmentList;
    }

    private List<Package> fetchPackagesFromDatabase() {
        List<Package> packageList = new ArrayList<>();
        Connection connect = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            connect = Connectosql.getInstance().getConnection();
            String query = "SELECT PackageID, PackageName, RentedPrice, PackageDesc, PackageImage FROM package";
            stmt = connect.createStatement();
            rs = stmt.executeQuery(query);

            while (rs.next()) {
                int packageID = rs.getInt("PackageID");
                String packageName = rs.getString("PackageName");
                double rentedPrice = rs.getDouble("RentedPrice");
                String packageDesc = rs.getString("PackageDesc");
                byte[] packageImage = rs.getBytes("PackageImage");

                Package pkg = new Package(packageID, packageName, rentedPrice, packageDesc, packageImage);
                packageList.add(pkg);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (connect != null) connect.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return packageList;
    }

    private void populateFields(Package selectedPackage) {
        // Populate package name
        packageName.setText(selectedPackage.getPackageName());

        // Populate rented price
        rentedPrice.setText(String.valueOf(selectedPackage.getRentedPrice()));

        // Populate package description
        descBox.setText(selectedPackage.getPackageDesc());

        // Populate package image
        imagePanel.removeAll();
        byte[] imageBytes = selectedPackage.getPackageImage();
        if (imageBytes != null) {
            ImageIcon originalIcon = new ImageIcon(imageBytes);
            Image originalImage = originalIcon.getImage();

            // Calculate the new size maintaining the aspect ratio
            int panelWidth = imagePanel.getWidth();
            int panelHeight = imagePanel.getHeight();
            int originalWidth = originalIcon.getIconWidth();
            int originalHeight = originalIcon.getIconHeight();
            double aspectRatio = (double) originalWidth / originalHeight;
            int newWidth = panelWidth;
            int newHeight = (int) (panelWidth / aspectRatio);
            if (newHeight > panelHeight) {
                newHeight = panelHeight;
                newWidth = (int) (panelHeight * aspectRatio);
            }

            // Scale the image to fit within the imagePanel
            Image resizedImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
            ImageIcon resizedIcon = new ImageIcon(resizedImage);
            JLabel imageLabel = new JLabel(resizedIcon);

            // Set preferred size to ensure it fits within the panel
            imageLabel.setPreferredSize(new Dimension(panelWidth, panelHeight));
            imageLabel.setHorizontalAlignment(JLabel.CENTER);
            imageLabel.setVerticalAlignment(JLabel.CENTER);

            imagePanel.add(imageLabel);
        } else {
            JLabel noImageLabel = new JLabel("No Image");
            noImageLabel.setHorizontalAlignment(JLabel.CENTER);
            noImageLabel.setVerticalAlignment(JLabel.CENTER);
            imagePanel.add(noImageLabel);
        }
        imagePanel.revalidate();
        imagePanel.repaint();

        // Populate equipment table with equipment names
        List<Equipment> equipmentList = fetchEquipmentForPackage(selectedPackage.getPackageID());
        EquipmentNameTableModel equipmentTableModel = new EquipmentNameTableModel(equipmentList);
        equipmentTable.setModel(equipmentTableModel);
    }

    private void loadEquipment(int categoryID) {
        List<Equipment> equipmentList = fetchEquipmentByCategory(categoryID);
        EquipmentCategoryTableModel tableModel = new EquipmentCategoryTableModel(equipmentList);
        allequipmentTable.setModel(tableModel);
    }

    // Fetch equipment by category from the database
    private List<Equipment> fetchEquipmentByCategory(int categoryID) {
        List<Equipment> equipmentList = new ArrayList<>();
        Connection connect = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            connect = Connectosql.getInstance().getConnection();
            String query = "SELECT EquipmentID, EquipmentName, EquipmentCategoryID, RentedPrice, EquipmentDesc, EquipmentImage, EquipmentAvailability " +
                           "FROM equipment WHERE EquipmentCategoryID = ?";
            stmt = connect.prepareStatement(query);
            stmt.setInt(1, categoryID);
            rs = stmt.executeQuery();

            while (rs.next()) {
                int equipmentID = rs.getInt("EquipmentID");
                String equipmentName = rs.getString("EquipmentName");
                double rentedPrice = rs.getDouble("RentedPrice");
                String equipmentDesc = rs.getString("EquipmentDesc");
                byte[] equipmentImage = rs.getBytes("EquipmentImage");
                boolean availability = rs.getBoolean("EquipmentAvailability");

                Equipment equipment = new Equipment(equipmentName, categoryID, rentedPrice, equipmentDesc, availability);
                equipmentList.add(equipment);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (connect != null) connect.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return equipmentList;
    }
    
    private void updatePackageInDatabase(int packageID, String packageName, double rentedPrice, String packageDesc, byte[] packageImage, List<Equipment> equipmentList) {
        Connection connect = null;
        PreparedStatement updatePackageStmt = null;
        PreparedStatement deletePackageEquipmentStmt = null;
        PreparedStatement insertPackageEquipmentStmt = null;

        try {
            // Connect to the database
            connect = Connectosql.getInstance().getConnection();
            connect.setAutoCommit(false); // Enable transaction

            // Update the package in the package table
            String updatePackageQuery = "UPDATE package SET PackageName = ?, RentedPrice = ?, PackageDesc = ?, PackageImage = ? WHERE PackageID = ?";
            updatePackageStmt = connect.prepareStatement(updatePackageQuery);
            updatePackageStmt.setString(1, packageName);
            updatePackageStmt.setDouble(2, rentedPrice);
            updatePackageStmt.setString(3, packageDesc);
            updatePackageStmt.setBytes(4, packageImage);
            updatePackageStmt.setInt(5, packageID);
            updatePackageStmt.executeUpdate();

            // Delete existing package-equipment associations
            String deletePackageEquipmentQuery = "DELETE FROM packageequipment WHERE PackageID = ?";
            deletePackageEquipmentStmt = connect.prepareStatement(deletePackageEquipmentQuery);
            deletePackageEquipmentStmt.setInt(1, packageID);
            deletePackageEquipmentStmt.executeUpdate();

            // Insert updated package-equipment associations
            String insertPackageEquipmentQuery = "INSERT INTO packageequipment (PackageID, EquipmentID) VALUES (?, ?)";
            insertPackageEquipmentStmt = connect.prepareStatement(insertPackageEquipmentQuery);
            for (Equipment equipment : equipmentList) {
                int equipmentID = getEquipmentIDByName(equipment.getName());
                insertPackageEquipmentStmt.setInt(1, packageID);
                insertPackageEquipmentStmt.setInt(2, equipmentID);
                insertPackageEquipmentStmt.executeUpdate();
            }

            connect.commit(); // Commit transaction
            JOptionPane.showMessageDialog(this, "Package updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Reload package data
            loadPackageTable();

        } catch (SQLException e) {
            if (connect != null) {
                try {
                    connect.rollback(); // Rollback transaction on error
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
            JOptionPane.showMessageDialog(this, "Error updating package: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (updatePackageStmt != null) updatePackageStmt.close();
                if (deletePackageEquipmentStmt != null) deletePackageEquipmentStmt.close();
                if (insertPackageEquipmentStmt != null) insertPackageEquipmentStmt.close();
                if (connect != null) connect.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    private int getEquipmentIDByName(String equipmentName) {
        Connection connect = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        int equipmentID = -1;

        try {
            connect = Connectosql.getInstance().getConnection();
            String query = "SELECT EquipmentID FROM equipment WHERE EquipmentName = ?";
            stmt = connect.prepareStatement(query);
            stmt.setString(1, equipmentName);
            rs = stmt.executeQuery();

            if (rs.next()) {
                equipmentID = rs.getInt("EquipmentID");
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (connect != null) connect.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return equipmentID;
    }

    private void Minimize_frontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Minimize_frontActionPerformed
        // TODO add your handling code here:
        parentFrame.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_Minimize_frontActionPerformed

    private void Exit_frontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit_frontActionPerformed
        // TODO add your handling code here:
        parentFrame.dispose();
    }//GEN-LAST:event_Exit_frontActionPerformed

    private void Resize_frontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resize_frontActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Resize_frontActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        int selectedRow = packageTable.getSelectedRow();
         if (selectedRow == -1) {
             JOptionPane.showMessageDialog(this, "Please select a package to delete.", "Error", JOptionPane.ERROR_MESSAGE);
             return; // No row selected
         }

         int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected package?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
         if (response != JOptionPane.YES_OPTION) {
             return; // User chose not to delete
         }

         Package selectedPackage = (Package) packageTable.getValueAt(selectedRow, 0); // Assuming the package is in the first column
         int packageID = selectedPackage.getPackageID();

         Connection connect = null;
         PreparedStatement deletePackageStmt = null;
         PreparedStatement deletePackageEquipmentStmt = null;

         try {
             // Connect to the database
             connect = Connectosql.getInstance().getConnection();
             connect.setAutoCommit(false); // Enable transaction

             // Delete the package from packageequipment table
             String deletePackageEquipmentQuery = "DELETE FROM packageequipment WHERE PackageID = ?";
             deletePackageEquipmentStmt = connect.prepareStatement(deletePackageEquipmentQuery);
             deletePackageEquipmentStmt.setInt(1, packageID);
             deletePackageEquipmentStmt.executeUpdate();

             // Delete the package from package table
             String deletePackageQuery = "DELETE FROM package WHERE PackageID = ?";
             deletePackageStmt = connect.prepareStatement(deletePackageQuery);
             deletePackageStmt.setInt(1, packageID);
             deletePackageStmt.executeUpdate();

             connect.commit(); // Commit transaction
             JOptionPane.showMessageDialog(this, "Package deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

             // Reload package data
             loadPackageTable();

         } catch (SQLException e) {
             if (connect != null) {
                 try {
                     connect.rollback(); // Rollback transaction on error
                 } catch (SQLException ex) {
                     ex.printStackTrace();
                 }
             }
             JOptionPane.showMessageDialog(this, "Error deleting package: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
         } finally {
             try {
                 if (deletePackageStmt != null) deletePackageStmt.close();
                 if (deletePackageEquipmentStmt != null) deletePackageEquipmentStmt.close();
                 if (connect != null) connect.close();
             } catch (SQLException ex) {
                 ex.printStackTrace();
             }
         }

    }//GEN-LAST:event_DeleteActionPerformed

    private void DisplayButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayButActionPerformed
        // TODO add your handling code here:
        GuiFer parentFrame = (GuiFer) this.getTopLevelAncestor();

        Display_Inv display = new Display_Inv(parentFrame);

        // Set the new panel as the content pane
        parentFrame.setContentPane(display);

        parentFrame.revalidate();
        parentFrame.repaint();
    }//GEN-LAST:event_DisplayButActionPerformed

    private void BundleButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BundleButActionPerformed
        // TODO add your handling code here:

        GuiFer parentFrame = (GuiFer) this.getTopLevelAncestor();

        PackageEquip equip = new PackageEquip(parentFrame);

        // Set the new panel as the content pane
        parentFrame.setContentPane(equip);

        parentFrame.revalidate();
        parentFrame.repaint();
    }//GEN-LAST:event_BundleButActionPerformed

    private void CustomerOrderButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerOrderButActionPerformed
        // TODO add your handling code here:

        GuiFer parentFrame = (GuiFer) this.getTopLevelAncestor();

        ViewCusto custo = new ViewCusto(parentFrame);

        // Set the new panel as the content pane
        parentFrame.setContentPane(custo);

        parentFrame.revalidate();
        parentFrame.repaint();
    }//GEN-LAST:event_CustomerOrderButActionPerformed

    private void OpenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuActionPerformed
        // TODO add your handling code here:
        parentFrame.openStoreFrame();
    }//GEN-LAST:event_OpenMenuActionPerformed

    private void ReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportsActionPerformed
        // TODO add your handling code here:
        GuiFer parentFrame = (GuiFer) this.getTopLevelAncestor();

        Reports report = new Reports(parentFrame);

        // Set the new panel as the content pane
        parentFrame.setContentPane(report);

        parentFrame.revalidate();
        parentFrame.repaint();
    }//GEN-LAST:event_ReportsActionPerformed

    private void EditFrontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditFrontActionPerformed
        // TODO add your handling code here:
        GuiFer parentFrame = (GuiFer) this.getTopLevelAncestor();

        EditBundle report = new EditBundle(parentFrame);

        parentFrame.setContentPane(report);

        parentFrame.revalidate();
        parentFrame.repaint();
    }//GEN-LAST:event_EditFrontActionPerformed

    private void ReturncalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturncalcActionPerformed
        // TODO add your handling code here:
        GuiFer parentFrame = (GuiFer) this.getTopLevelAncestor();

        // Pass the JFrame to the Main_Menu constructor
        ReturnCalc returns = new ReturnCalc(parentFrame);

        // Set the new panel as the content pane
        parentFrame.setContentPane(returns);

        parentFrame.revalidate();
        parentFrame.repaint();
    }//GEN-LAST:event_ReturncalcActionPerformed

    private void AddButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButActionPerformed
        // TODO add your handling code here:
        GuiFer parentFrame = (GuiFer) this.getTopLevelAncestor();

        // Pass the JFrame to the Main_Menu constructor
        Main_Menu menu = new Main_Menu(parentFrame);

        // Set the new panel as the content pane
        parentFrame.setContentPane(menu);

        parentFrame.revalidate();
        parentFrame.repaint();
    }//GEN-LAST:event_AddButActionPerformed

    private void CameraBut1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CameraBut1ActionPerformed
        // TODO add your handling code here:
        loadEquipment(1);
    }//GEN-LAST:event_CameraBut1ActionPerformed

    private void LightButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LightButActionPerformed
        // TODO add your handling code here:
        loadEquipment(2);
    }//GEN-LAST:event_LightButActionPerformed

    private void AudioButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AudioButActionPerformed
        // TODO add your handling code here:
        loadEquipment(3);
    }//GEN-LAST:event_AudioButActionPerformed

    private void MisceButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MisceButActionPerformed
        // TODO add your handling code here:
        loadEquipment(4);
    }//GEN-LAST:event_MisceButActionPerformed

    private void UpdatePkgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePkgActionPerformed
        int selectedRow = packageTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a package to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // No row selected
        }

        int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to update the selected package?", "Confirm Update", JOptionPane.YES_NO_OPTION);
        if (response != JOptionPane.YES_OPTION) {
            return; // User chose not to update
        }

        Package selectedPackage = (Package) packageTable.getValueAt(selectedRow, 0); // Assuming the package is in the first column
        int packageID = selectedPackage.getPackageID();

        String updatedPackageName = packageName.getText();
        double updatedRentedPrice = Double.parseDouble(rentedPrice.getText());
        String updatedPackageDesc = descBox.getText();

        // Ensure the TransferHandler is set and retrieve the image byte array
        TransferHandler transferHandler = imagePanel.getTransferHandler();
        byte[] updatedPackageImage = null;
        if (transferHandler instanceof ImageFileTransferHandler) {
            updatedPackageImage = ((ImageFileTransferHandler) transferHandler).getImageByteArray();
        }

        // Collect updated equipment list from equipmentTable
        List<Equipment> updatedEquipmentList = new ArrayList<>();
        EquipmentNameTableModel model = (EquipmentNameTableModel) equipmentTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Equipment equipment = model.getEquipmentAt(i);
            updatedEquipmentList.add(equipment);
        }

        updatePackageInDatabase(packageID, updatedPackageName, updatedRentedPrice, updatedPackageDesc, updatedPackageImage, updatedEquipmentList);
    }//GEN-LAST:event_UpdatePkgActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBut;
    private javax.swing.JButton AudioBut;
    private javax.swing.JButton BundleBut;
    private javax.swing.JButton CameraBut1;
    private javax.swing.JButton CustomerOrderBut;
    private javax.swing.JLabel DESC;
    private javax.swing.JButton Delete;
    private javax.swing.JButton DisplayBut;
    private javax.swing.JButton EditFront;
    private javax.swing.JPanel EmptyPannel;
    private javax.swing.JScrollPane EquipmentSp;
    private javax.swing.JButton Exit_front;
    private javax.swing.JButton LightBut;
    private javax.swing.JPanel MainPanelDrag;
    private javax.swing.JButton Minimize_front;
    private javax.swing.JButton MisceBut;
    private javax.swing.JButton OpenMenu;
    private javax.swing.JPanel PKGEQUIPMENT;
    private javax.swing.JPanel PKGIMG;
    private javax.swing.JLabel PKGNAME;
    private javax.swing.JLabel RPrice;
    private javax.swing.JButton Reports;
    private javax.swing.JButton Resize_front;
    private javax.swing.JButton Returncalc;
    private javax.swing.JButton UpdatePkg;
    private javax.swing.JTable allequipmentTable;
    private javax.swing.JTextArea descBox;
    private javax.swing.JTable equipmentTable;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField packageName;
    private javax.swing.JTable packageTable;
    private javax.swing.JTextField rentedPrice;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
